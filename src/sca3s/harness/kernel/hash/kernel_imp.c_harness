/* Copyright (C) 2018 SCARV project <info@scarv.org>
 *
 * Use of this source code is restricted per the MIT license, a copy of which 
 * can be found at https://opensource.org/licenses/MIT (or should be included 
 * as LICENSE.txt within the associated archive or repository).
 */

// ============================================================================

#if   ( KERNEL_NAMEOF == KERNEL_NAMEOF_GENERIC   )
#define __KERNEL_NAMEOF "generic"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_1     )
#define __KERNEL_NAMEOF  "sha_1"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_224 )
#define __KERNEL_NAMEOF  "sha_2_224"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_256 )
#define __KERNEL_NAMEOF  "sha_2_256"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_384 )
#define __KERNEL_NAMEOF  "sha_2_384"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_512 )
#define __KERNEL_NAMEOF  "sha_2_512"
#endif

#define KERNEL_ID VERSION ":" KERNEL ":" __KERNEL_NAMEOF

#pragma message( "?data tsc"    " = "     "0"              )
#pragma message( "?data m"      " = " INT(KERNEL_SIZEOF_M) )
#pragma message( "?data d"      " = " INT(KERNEL_SIZEOF_D) )

#pragma message( "#data tsc"    " = "     "0"              )
#pragma message( "#data m"      " = " INT(KERNEL_SIZEOF_M) )
#pragma message( "#data d"      " = " INT(KERNEL_SIZEOF_D) )

#pragma message( "?kernel_id"   " = "     KERNEL_ID        )

#pragma message( ">kernel_data" " = "     "m"              )
#pragma message( "<kernel_data" " = " "tsc,d"              )

// ============================================================================

/** @brief      A register that contains message.
  */

uint8_t m[ KERNEL_SIZEOF_M ] = { KERNEL_INITOF_M };

/** @brief      A register that contains  digest.
  */

uint8_t d[ KERNEL_SIZEOF_D ] = { KERNEL_INITOF_D };

/** @brief      Number of used bytes in register that contains message.
  */

uint8_t n_m = 0;

/** @brief      Number of used bytes in register that contains  digest.
  */

uint8_t n_d = 0;

/** @brief      Generate a kernel identifier string.
  *
  * @param[out] x a (pointer to a) buffer into which the identifier string is copied
  *
  * @note       By convention, the identifier string constitutes a sequence 
  *             of colon-separated fields; to allow the string to be parsed, 
  *             the first two fields must be \c VERSION and \c KERNEL.
  */

void kernel_id( char* x ) {
  strcpy( x, KERNEL_ID );
}

bool kernel_prologue();
bool kernel();
bool kernel_epilogue();

/** @brief      A specification of the
  *             registers
  *             accessible within the kernel.
  *
  * @note       By setting \c .id equal to \c NULL, the entry will act as a
  *             terminator for the array; such a terminator entry must exist
  *             as the final entry.
  */

kernel_data_spec_t kernel_data_spec[] = {
// kernel-agnostic
  { .id = "tsc", .data = ( uint8_t* )( &kernel_tsc ), .used = ( uint8_t* )( NULL ), .size = SIZEOF( kernel_tsc ), .type = KERNEL_DATA_TYPE_O    },
// kernel-specific
  { .id =   "m", .data = ( uint8_t* )(           m ), .used = ( uint8_t* )( &n_m ), .size = SIZEOF(          m ), .type = KERNEL_DATA_TYPE_I    },
  { .id =   "d", .data = ( uint8_t* )(           d ), .used = ( uint8_t* )( &n_d ), .size = SIZEOF(          d ), .type = KERNEL_DATA_TYPE_O    },
// terminator
  { .id =  NULL, .data = ( uint8_t* )(        NULL ), .used = ( uint8_t* )( NULL ), .size =       (          0 ), .type = KERNEL_DATA_TYPE_NONE }
};

/** @brief      A specification of the
  *             functions
  *             accessible within the kernel.
  */

kernel_func_spec_t kernel_func_spec   = {
  .kernel_id       = kernel_id,

  .kernel_prologue = kernel_prologue,
  .kernel          = kernel,
  .kernel_epilogue = kernel_epilogue
};

// ============================================================================
